测评



你们昨天的问题
1.括号、等号的问题
	解决：代码缩进


2.属性样式分不清
	错误的写法：
		div.style.className='on';
		div.style.value

3.position.top
		div.style.position.top
		div{ postion:absolute; top:20px;}
=====================================
复习
	
	1.事件：用户的操作
	onclick   点击事件
	alert()   弹出

	2.百度登录
		document.getElementById('id名');
		.		的
		=       赋值
	3.新的事件
		onmouseover   鼠标移入事件
		onmouseout    鼠标移出事件
	4.函数
		定义
			function 函数名(){
				执行的代码
			}
		调用
			函数名();
		变量	
		var 变量名 = 要起别名的东西
	5.换肤
		js可以修改任何样式、属性
		任何标签都可以加事件
		在html css中怎么写 js中就怎么写
		事件加给谁？
				操作谁就加给谁
		1).获取body
			document.body
		2).class   classname	
	6.bing登录
		if
			if(条件){
				语句一
			}else{
				语句二
			}
		js是玩行间样式的
	7.a  href  javascript:;	
=====================================

1.传参
2.提取行间事件
3.获取元素的另一种方式(获取一组元素)
4.循环
5.选项卡

===========================================
1.传参
		function 函数名(参数){
			执行的代码
			用参数
		}
		函数名('传参数');
		1.定义函数写参数只是占位
		2.参数的个数根据需求来定
		
		什么时候用传参？
				函数里有可变的东西 就可以用传参

		操作属性的另一种方式
			1)     .   可以操作属性
			2)     []  也可以操作属性
			区别
				1).  已有的属性 不能放变量
				2).  可以放变量
			点可以做到的 方括号一定能做到
			方括号能做到的 点不一定能做到

变量和字符串

		1.变量是可变的
		2.变量没有单引号   字符串有单引号
*注释
		//  单行注释
		/**/ 多行注释
==================================================		
2.提取行间事件
	行为 表现 结构三者分离

	js   css  html

有名字的函数
没名字的函数(匿名函数、事件函数)
	如果函数重复出现取名字、
window.onload
	页面加载完毕
		html css js 图片下载完成

以后写js
1.window.onload
2.获取元素
3.加事件
===========================================

获取一组元素
	document.getElementById('id')
	document.getElementsByTagName('标签名')
	
	document	文档
	get  		获取
	Elements    一组
	By          通过
	TagName     标签名

	length      表示长度 

	可以在某个元素下获取一组元素

	*从零开始查数
=======================================
循环
	while循环

	循环
		1.初始值
		2.条件
		3.自增
		4.语句
	初始值
	while(条件){
		语句
		自增
	}

	for循环
	for(初始值，条件，自增){
		语句
	}
	*大多数时候都用for 很少的时候用while 

	只要操作一组元素  就用for循环

=  赋值
== 比较


===========================
选项卡
		前奏
		**循环中加事件  事件中的i不能用

		this
			指的是当前触发事件的元素
		选项卡思路
			几个按钮就对应几个内容

自定义属性
		
		1.html 属性
		2.在高级浏览器中,过滤掉不认识的属性（只发生一次）
		3.加载js
undefined
		未定义
	约定俗成？
总结
		1.先清除所有
		2.改变当前样式





















